import argparse
import io
import os
import sys

parser = argparse.ArgumentParser()
parser.add_argument('--test_file', help='The test.csv file downloaded from kaggle',
                    default='data/test.csv')
parser.add_argument('--generate_features_script', help='The script file that generates the features',
                    default='train_model.py')
parser.add_argument('--should_generate_test_features', help='If true, calls the generate_features_script for the test.csv, else uses features_file',
                    action='store_true')
parser.add_argument('--model_prefix', help='Prefix for the output model files', default='data/logR.boosted_model')
parser.add_argument('--test_features_file', help='Features file generated from the test.csv file', default='data/logR.boosted_test')
parser.add_argument('--predictions_files_prefix', help='Prefix of the predictions output files generated by the ./predict binary',
                    default='data/boosted_predictions')
parser.add_argument('--num_models', help='Number of models that should be output', type=int, default=1)
parser.add_argument('--predict_binary', help='Path to the predict binary of LIBLINEAR', default='~/biometric/liblinear-1.93/predict')
parser.add_argument('--weights', nargs='+', help='Provide weights for the models',
                    default=[1], type=float)
parser.add_argument('--seq_id_file', help='Name of the temp file that will contain the seq_ids',
                    default='data/seq_ids')
parser.add_argument('--answer_file', help='Final answer file to be submitted on kaggle',
                    default='data/ans')
parser.add_argument('--questions_file', help='The questions.csv file downloaded from kaggle',
                    default='data/questions.csv')
parser.add_argument('--map_ids_script', help='The map_ids.py script that gives the prediction '
                    'probabilities for (seq_id, dev_id) pair', default='map_ids.py')
args = parser.parse_args()

def ExecuteCommand(cmd):
  print >>sys.stderr, 'Executing %s' % (cmd)
  os.system(cmd)

def GetPredictions(predictions_files_prefix, weights, seq_id_file_name,
                   answer_file_name, questions_file_name):
  num_models = len(weights)
  f = []
  labels = []
  for i in range(1, num_models + 1):
    f_ptr = open(predictions_files_prefix + str(i))
    f.append(f_ptr)
    labels.append(f_ptr.readline().split(' '))

  seq_id_file = open(seq_id_file_name)
  pred_map = {}
  for seq_id in seq_id_file.readlines():
    seq_id = int(seq_id.replace('\n', ''))
    if seq_id not in pred_map:
      pred_map[seq_id] = {}
    for idx, f_ptr in enumerate(f):
      row = f_ptr.readline().replace('\n','').split(' ')
      row = map(float, row)
      for i in range(1, len(row)):
        device_id = int(labels[idx][i])
        if device_id not in pred_map[seq_id]:
          pred_map[seq_id][device_id] = 0
        pred_map[seq_id][device_id] += weights[idx]*row[i]
  
  answer_file = open(answer_file_name, 'w')
  questions_file = open(questions_file_name)
  line_cnt = 0
  for line in questions_file.readlines():
    line = line.replace('\n', '')
    line_cnt += 1
    if line_cnt == 1:
      continue
    [q_id, seq_id, quiz_device] = map(int, line.split(','))
    if seq_id in pred_map:
      print >>answer_file, '%d,%f' % (q_id, pred_map[seq_id][quiz_device])
    else:
      print >>sys.stderr, 'seq_id %d not in final_distances!' % (seq_id)
      print '%d,%d' % (q_id, 0)
  questions_file.close()
  answer_file.close()

def main():
  print args
  assert len(args.weights) == args.num_models
  if args.should_generate_test_features:
    ExecuteCommand('python %s %s %s' % (args.generate_features_script,
                                        args.test_file,
                                        args.test_features_file))
    ExecuteCommand("cut -f 1 -d ' '  %s > %s" % (args.test_features_file, args.seq_id_file)) 
  for i in range(1, args.num_models + 1):
    model_file = args.model_prefix + str(i)
    predicted_labels_file = args.predictions_files_prefix + str(i)
    ExecuteCommand('%s -b 1 %s %s %s' % (args.predict_binary,
                                         args.test_features_file,
                                         model_file,
                                         predicted_labels_file))
  GetPredictions(args.predictions_files_prefix,
                 args.weights,
                 args.seq_id_file,
                 args.answer_file,
                 args.questions_file)

if __name__ == '__main__':
  main()
